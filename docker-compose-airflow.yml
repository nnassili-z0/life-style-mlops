# Minimal, local-development docker-compose for Airflow (LocalExecutor).
# Loads variables from .env in repo root.

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: ./docker/Dockerfile_new
  env_file:
    - ./.env
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW__METRICS__STATSD_HOST: statsd-exporter
    AIRFLOW__METRICS__STATSD_PORT: 8125
    AIRFLOW__METRICS__STATSD_PREFIX: airflow
    DATABRICKS_TOKEN: ${DATABRICKS_TOKEN}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./requirements.txt:/requirements.txt
    - ./data:/opt/airflow/data
    - ./demo_artifacts:/opt/airflow/demo_artifacts
  networks:
    - airflow_net

services:
  postgres:
    image: postgres:13
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - airflow_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always

  airflow-init:
    <<: *airflow-common
    env_file:
      - ./.env
    entrypoint: ["bash", "-c", "python /opt/airflow/data/ingest_kaggle.py && airflow db upgrade && airflow users create --username ${_AIRFLOW_WWW_USER_USERNAME} --password ${_AIRFLOW_WWW_USER_PASSWORD} --firstname Admin --lastname User --role Admin --email admin@example.com || true"]
    depends_on:
      - postgres
    restart: always

  webserver:
    <<: *airflow-common
    env_file:
      - ./.env
    ports:
      - "8080:8080"
    entrypoint: ["bash", "-c", "airflow webserver"]
    depends_on:
      - airflow-init
    restart: always

  scheduler:
    <<: *airflow-common
    env_file:
      - ./.env
    entrypoint: ["bash", "-c", "airflow scheduler"]
    depends_on:
      - airflow-init
    restart: always

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: mlops_prometheus
    volumes:
      - ./resources/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - airflow_net
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: mlops_grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./resources/grafana/provisioning:/etc/grafana/provisioning
      - ./resources/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - airflow_net
    depends_on:
      - prometheus
    restart: always

  node-exporter:
    image: prom/node-exporter:latest
    container_name: mlops_node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - airflow_net
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: mlops_cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8081:8080"
    networks:
      - airflow_net
    restart: always

  statsd-exporter:
    image: prom/statsd-exporter:latest
    container_name: life-style-mlops-statsd-1
    ports:
      - "9102:9102"
      - "8125:8125/udp"
    networks:
      - airflow_net
    restart: always

networks:
  airflow_net:

volumes:
  postgres-db-volume:
  prometheus_data:
  grafana_data:

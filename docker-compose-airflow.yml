# Minimal, local-development docker-compose for Airflow (LocalExecutor).
# Loads variables from .env in repo root.

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: ./docker/Dockerfile_new
  env_file:
    - ./.env
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./requirements.txt:/requirements.txt
    - ./data:/opt/airflow/data
    - ./demo_artifacts:/opt/airflow/demo_artifacts
  networks:
    - airflow_net

services:
  postgres:
    image: postgres:13
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - airflow_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always

  airflow-init:
    <<: *airflow-common
    env_file:
      - ./.env
    entrypoint: ["bash", "-c", "airflow db upgrade && airflow users create --username ${_AIRFLOW_WWW_USER_USERNAME} --password ${_AIRFLOW_WWW_USER_PASSWORD} --firstname Admin --lastname User --role Admin --email admin@example.com || true"]
    depends_on:
      - postgres
    restart: always

  webserver:
    <<: *airflow-common
    env_file:
      - ./.env
    ports:
      - "8080:8080"
    entrypoint: ["bash", "-c", "airflow webserver"]
    depends_on:
      - airflow-init
    restart: always

  scheduler:
    <<: *airflow-common
    env_file:
      - ./.env
    entrypoint: ["bash", "-c", "airflow scheduler"]
    depends_on:
      - airflow-init
    restart: always

networks:
  airflow_net:

volumes:
  postgres-db-volume:
